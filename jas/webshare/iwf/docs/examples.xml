<response>
	<action type='html'>
		<a name='examples' />
		<h2>Examples</h2>
		<p>
		IWF has been designed from the ground up to allow for a "typical" web developer to be able to
		harness its power without changing his or her methodologies drastically.  For instance, you would
		still fill out anchor tag <code>href</code> attributes, form tag <code>onsubmit</code> attributes,
		form control tag (aka <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, <code>&lt;select&gt;</code>)
		<code>onclick</code> attributes, etc.
		</p>
		<h3>Basic Link Navigation (<code>&lt;a href=''&gt;</code>)</h3>
		<p>
		To make the browser download new data into a portion of the page (instead of refreshing the entire page),
		simply wrap the url in a javascript call to <code>iwfRequest</code>:
		</p>
		<pre>
&lt;html&gt;
	&lt;head&gt;
		<b>
		&lt;script type='text/javascript' src='iwfcore.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfgui.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfxml.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfajax.js'&gt;&lt;/script&gt;
		</b>
	&lt;/head&gt;
	&lt;body&gt;
		&lt;div id='iwfContent' /&gt;
		<b>&lt;a href='javascript:iwfRequest("iwfexample2.xml");'&gt;Get Info&lt;/a&gt;</b>
	&lt;/body&gt;
&lt;/html&gt;
		</pre>
		<p>
		One of the first things you will notice are the javascript files you must include for IWF to work.
		These javascript files are somewhat large -- about 20k each.  This is roughly the size of a logo image,
		if you want to put it into perspective with the size of a typical webpage.
		</p>
		<p>
		You'll notice the call to <code>iwfRequest</code> is relatively simple: just specify the url you wish to request.
		</p>
		<p>
		So the question is, what does it do with the response?  The answer is: it depends.
		</p>
		<p>
		Both the client and the server can control where content is placed after a response is received.  If the client specifies a target, the server target in the xml is ignored.  
		In our example, no target is specified in our call to
		<code>iwfRequest</code>, and assuming the xml response from the server doesn't contain a target, the IWF default target of <code>iwfContent</code> is used.
		If there is no element with the id that matches the target (default or not), IWF will <code>alert</code> an error.
		</p>
		<h4>Populate A Specific Element</h4>
		<p>
		Now let's push the response into a specific element instead of the default one.  We'll use the <code>id</code> of
		<code>responseGoesHere</code>:
		</p>
		<p>
		All we need to do is specify the second parameter of the
		<code>iwfRequest</code> function, which is the id of the element into which we are to push the response.
		</p>
		<p>
		<pre>
&lt;html&gt;
	&lt;head&gt;
		&lt;script type='text/javascript' src='iwfcore.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfgui.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfxml.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfajax.js'&gt;&lt;/script&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;div id='iwfContent' /&gt;
		<b>&lt;div id='responseGoesHere' /&gt;</b>
		&lt;a href='javascript:return iwfRequest("iwfexample2.xml"<b>, "responseGoesHere"</b>);'&gt;Get Info&lt;/a&gt;
	&lt;/body&gt;
&lt;/html&gt;
		</pre>
		</p>

		<h3>Form Submission via <code>&lt;input type='submit'&gt;</code></h3>
		<p>
		When a form control object, a form object, or a form name is passed to <code>iwfRequest</code> it reads the
		values from the <code>&lt;form&gt;</code> tag to get the <code>action</code>, <code>method</code>, and <code>enctype</code> (or <code>encoding</code>) to determine how to perform
		its request.  IWF is simply emulating the default behavior any browser would when submitting a form, so the coding habits
		transfer from "normal" websites well.
		</p>
		<h4>Populate Default Element</h4>
		<p>
		The following
		code will post the form in the background when the user clicks the submit button, then fill the results into the IWF default
		<code>&lt;div id='iwfContent' /&gt;</code> element:
		<pre>
&lt;html&gt;
	&lt;head&gt;
		&lt;script type='text/javascript' src='iwfcore.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfgui.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfxml.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfajax.js'&gt;&lt;/script&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;div id='iwfContent' /&gt;
		&lt;form name='frmExample' action='iwfexample.xml' method='post' <b>onsubmit='javascript:return iwfRequest(this);'</b>&gt;
			&lt;input type='hidden' value='this is posted' name='hidPosted' /&gt;
			&lt;input type='submit' name='btnSubmit' value='Submit' /&gt;
		&lt;/form&gt;
	&lt;/body&gt;
&lt;/html&gt;
		</pre>
		</p>
		<p>
		You may notice the <code>&lt;form&gt;</code> tag's <code>onsubmit</code> attribute.
		Previously, we passed a url as the first parameter -- now we're passing the <code>form</code> object.
		IWF detects what is being passed and creates the details of the http request to send automatically.
		</p>
		<h4>Populate Specfic Element</h4>
		<p>
		Now, should we want to populate a specific element other than the default of <code>iwfContent</code>,
		say one named <code>responseGoesHere</code>:
		</p>
		<p>
		<pre>
&lt;html&gt;
	&lt;head&gt;
		&lt;script type='text/javascript' src='iwfcore.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfgui.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfxml.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfajax.js'&gt;&lt;/script&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;div id='iwfContent' /&gt;
		<b>&lt;div id='responseGoesHere' /&gt;</b>
		&lt;form name='frmExample' action='iwfexample.xml' method='post' onsubmit='javascript:return iwfRequest(this<b>, "responseGoesHere"</b>);'&gt;
			&lt;input type='hidden' value='this is posted' name='hidPosted' /&gt;
			&lt;input type='submit' name='btnSubmit' value='Submit' /&gt;
		&lt;/form&gt;
	&lt;/body&gt;
&lt;/html&gt;
		</pre>
		</p>
		<h3>Form Submission via a button click / checkbox change / etc</h3>
		<p>
		You may want submit a form on user input that is not clicking the "submit" button.  In traditional websites,
		this was done using <code>form.submit()</code> or something similar.  IWF supports this kind of functionality in
		much the same way as it does with using the "submit" button -- you must call <code>iwfRequest(this)</code>.
		</p>
		<p>
		IWF is able to determine that the request is being called from a form control element and not a form element.
		It then can determine the form which contains that element, parse that form's contents, etc.  So the API for doing
		this type of form submittal is identical to the original type.  It is important to note, that like the traditional
		<code>form.submit()</code>, submitting forms using <code>iwfRequest(this)</code> from a form control element does <b>not</b>
		cause the <code>form.onsubmit</code> event to be called.  Again, this reflects the traditional browser behavior, not necessarily
		the ideal behavior. 
		</p>
		<h4>Populate Default Element</h4>
		<p>
		<pre>
&lt;html&gt;
	&lt;head&gt;
		&lt;script type='text/javascript' src='iwfcore.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfgui.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfxml.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfajax.js'&gt;&lt;/script&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;div id='iwfContent' /&gt;
		&lt;form name='frmExample' action='iwfexample.xml' method='post' onsubmit='<b>THIS IS NEVER CALLED</b>'&gt;
			&lt;input type='hidden' value='this is posted' name='hidPosted' /&gt;
			<b>&lt;input type='button' name='btnGo' value='Go' onclick='javascript:return iwfRequest(this);' /&gt;</b>
		&lt;/form&gt;
	&lt;/body&gt;
&lt;/html&gt;
		</pre>
		</p>
		<h4>Populate Specfic Element</h4>
		<p>
		<pre>
&lt;html&gt;
	&lt;head&gt;
		&lt;script type='text/javascript' src='iwfcore.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfgui.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfxml.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfajax.js'&gt;&lt;/script&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;div id='iwfContent' /&gt;
		<b>&lt;div id='responseGoesHere' /&gt;</b>
		&lt;form name='frmExample' action='iwfexample.xml' method='post' onsubmit='<b>THIS IS NEVER CALLED</b>'&gt;
			&lt;input type='hidden' value='this is posted' name='hidPosted' /&gt;
			&lt;input type='button' name='btnGo' value='Go' onclick='javascript:return iwfRequest(this<b>, "responseGoesHere"</b>);' /&gt;
		&lt;/form&gt;
	&lt;/body&gt;
&lt;/html&gt;
		</pre>
		
		</p>
		<h3>Form Submission via Link Navigation <code>&lt;a href=''&gt;</code></h3>
		<p>
		IWF also supports submitting forms via a hyperlink.  Again, it uses the familiar <code>iwfRequest</code> function,
		but now the <code>name</code> of the form must be passed, as a hyperlink is not considered to be a child of the <code>&lt;form&gt;</code>
		in which it resides.
		</p>
		<h4>Populate Default Element</h4>
		<p>
		<pre>
&lt;html&gt;
	&lt;head&gt;
		&lt;script type='text/javascript' src='iwfcore.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfgui.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfxml.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfajax.js'&gt;&lt;/script&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;div id='iwfContent' /&gt;
		&lt;form name='frmExample' action='iwfexample.xml' method='post' onsubmit='<b>THIS IS NEVER CALLED</b>'&gt;
			&lt;input type='hidden' value='this is posted' name='hidPosted' /&gt;
			<b>&lt;a href='javascript:return iwfRequest("frmExample");'&gt;Go&lt;/a&gt;</b>
		&lt;/form&gt;
	&lt;/body&gt;
&lt;/html&gt;
		</pre>
		</p>



		<p>
		When the "Go" link is clicked, IWF will search the current page for a form named "frmExample".
		If it finds one, it assumes the string is the name of a form and submits it.  If it cannot find
		one, it assumes "frmExample" is a url and requests it from the server.
		</p>

		<h4>Populate Specfic Element</h4>
		<p>
		Again, all we need to do is to specify the target in the call to <code>iwfRequest</code>:
		</p>
		<p>
		<pre>
&lt;html&gt;
	&lt;head&gt;
		&lt;script type='text/javascript' src='iwfcore.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfgui.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfxml.js'&gt;&lt;/script&gt;
		&lt;script type='text/javascript' src='iwfajax.js'&gt;&lt;/script&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;div id='iwfContent' /&gt;
		<b>&lt;div id='responseGoesHere' /&gt;</b>
		&lt;form name='frmExample' action='iwfexample.xml' method='post' onsubmit='<b>THIS IS NEVER CALLED</b>'&gt;
			&lt;input type='hidden' value='this is posted' name='hidPosted' /&gt;
			<b>&lt;a href='javascript:return iwfRequest("frmExample", "responseGoesHere");' /&gt;</b>
		&lt;/form&gt;
	&lt;/body&gt;
&lt;/html&gt;
		</pre>
		</p>


		<p>
		NOTE:  Experienced
		DHTML coders will notice that <code>iwfRequest</code> returns different values when it is called with a string for the first argument than otherwise:
		Specifying a string causes <code>iwfRequest</code> to return absolutely no value.  This is because clicking an anchor tag causes the browser to navigate to the result of the <code>href</code>, which we do not want to happen.
		If no value is returned from the <code>href</code>, the browser does nothing.
		So in our anchor tag example, <code>iwfRequest</code> returns absolutely nothing.  However, in our form submission example, <code>iwfRequest</code> returns
		the value <code>false</code> to prevent the browser from actually submitting the form, as <code>iwfRequest</code> is doing so
		in the background.
		</p>
	</action>
</response>