{=============================================================================
|    _________ _______  _______  ______  _______             Get out of the  |
|   /___  ___// _____/ / _____/ / __  / / _____/               Mainstream... |
|      / /   / /__    / / ___  / /_/ / / /____                Jump into the  |
|     / /   / ____/  / / /  / / __  / /____  /                   Jetstream   |
|____/ /   / /___   / /__/ / / / / / _____/ /                                |
/_____/   /______/ /______/ /_/ /_/ /______/                                 |
|         Virtually Everything IT(tm)                         info@jegas.com |
==============================================================================
                       Copyright(c)2016 Jegas, LLC
=============================================================================}


//=============================================================================
{ }
// class for working with rgba values for graphic manipulation typically.
// RGBA = Red, Green, Blue, Alpha
Unit ug_rgba;
//=============================================================================


//=============================================================================
// Global Directives
//=============================================================================
{$INCLUDE i_jegas_macros.pp}
{$DEFINE SOURCEFILE:='ug_rgba.pp'}
{$SMARTLINK ON}
{$PACKRECORDS 4}
{$MODE objfpc}

{$IFDEF DEBUGLOGBEGINEND}
{$INFO | DEBUGLOGBEGINEND: TRUE}
{$ENDIF}
//=============================================================================



//*****************************************************************************
//=============================================================================
//*****************************************************************************
//
                               Interface
//
//*****************************************************************************
//=============================================================================
//*****************************************************************************


{}
// RGBA - Usage:    uRGBA MyColor;  MyColor.Red=100; MyColor.Pixel=(a dword)
//  typedef union RGBA {
//  struct {
//    unsigned char Blue;
//    unsigned char Green;
//    unsigned char Red;
//    unsigned char Alpha;
//  };
//  DWORD Pixel;
//} uRGBA;
type rtRGBA = Record
//============================================================================
  Blue: byte;
  Green: byte;
  Red: byte;
  Alpha: byte;
end;
//============================================================================

//============================================================================
{ }
type TRGBA = Class
//============================================================================
  RGBA: rtRGBA;
  constructor Create;
  constructor Create(p_Pixel: Cardinal);
  constructor Create(p_R: byte; p_G: byte; p_B: byte; p_A: byte);
  constructor Create(p_R: byte; p_G: byte; p_B: byte);
  destructor Destroy; override;
  procedure Red_Set(p_Red: byte);
  procedure Green_Set(p_Green: byte);
  procedure Blue_Set(p_Blue: byte);
  procedure Alpha_Set(p_Alpha: byte);
  procedure RGB_Set(p_Red: byte; p_Green: byte; p_Blue: byte);
  procedure RGB_Set(p_RGB: cardinal);
  procedure RGBA_Set( p_Red: byte;  p_Green: byte;  p_Blue: byte;  p_Alpha: byte);
  procedure RGBA_Set(p_RGBA:Cardinal );
  function Red_Get:byte;
  function Green_Get:byte;
  function Blue_Get:byte;
  function Alpha_Get:byte;
  function RGB_Get:Cardinal;
  function RGBA_Get: cardinal;
end;
//============================================================================






//============================================================================
//============================================================================
//============================================================================
                            Implementation
//============================================================================
//============================================================================
//============================================================================








//============================================================================
// BEGIN       TRGBA
//============================================================================


//----------------------------------------------------------------------------
constructor TRGBA.Create;
//----------------------------------------------------------------------------
begin
  RGBA.Blue:=0;
  RGBA.Green:=0;
  RGBA.Red:=0;
  RGBA.Alpha:=0;
end;
//----------------------------------------------------------------------------


//----------------------------------------------------------------------------
constructor TRGBA.Create(p_Pixel: Cardinal);
//----------------------------------------------------------------------------
begin
  RGBA:=rtRGBA(p_Pixel);
end;
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
constructor TRGBA.Create(p_R: byte; p_G: byte; p_B: byte; p_A: byte);
//----------------------------------------------------------------------------
begin
  RGBA.Blue:=p_B;
  RGBA.Green:=p_G;
  RGBA.Red:=p_R;
  RGBA.Alpha:=p_A;
end;
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
constructor TRGBA.Create(p_R: byte; p_G: byte; p_B: byte);
//----------------------------------------------------------------------------
begin
  RGBA.Blue:=p_B;
  RGBA.Green:=p_G;
  RGBA.Red:=p_R;
  RGBA.Alpha:=255;
end;
//----------------------------------------------------------------------------


//----------------------------------------------------------------------------
destructor TRGBA.Destroy;
//----------------------------------------------------------------------------
begin
end;
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
procedure TRGBA.Red_Set(p_Red: byte);
//----------------------------------------------------------------------------
begin
  RGBA.Red:=p_Red;
end;
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
procedure TRGBA.Green_Set(p_Green: byte);
//----------------------------------------------------------------------------
begin
  RGBA.Green:=p_Green;
end;
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
procedure TRGBA.Blue_Set(p_Blue: byte);
//----------------------------------------------------------------------------
begin
  RGBA.Blue:=p_Blue;
end;
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
procedure TRGBA.Alpha_Set(p_Alpha: byte);
//----------------------------------------------------------------------------
begin
  RGBA.Alpha:=p_Alpha;
end;
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
procedure TRGBA.RGB_Set(p_Red: byte; p_Green: byte; p_Blue: byte);
//----------------------------------------------------------------------------
begin
  RGBA.Red:=p_Red;
  RGBA.Green:=p_Green;
  RGBA.Blue:=p_Blue;
end;
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
procedure TRGBA.RGB_Set(p_RGB: Cardinal);
//----------------------------------------------------------------------------
var Temp: rtRGBA;
begin
  Temp:=rtRGBA(p_RGB);
  Temp.Alpha:=RGBA.Alpha;
  RGBA:=Temp;
end;
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
procedure TRGBA.RGBA_Set( p_Red: byte;  p_Green: byte;  p_Blue: byte;  p_Alpha: byte);
//----------------------------------------------------------------------------
begin
  RGBA.Red:=p_Red;
  RGBA.Green:=p_Green;
  RGBA.Blue:=p_Blue;
  RGBA.Alpha:=p_Alpha;
end;
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
procedure TRGBA.RGBA_Set(p_RGBA: cardinal);
//----------------------------------------------------------------------------
begin
  RGBA:=rtRGBA(p_RGBA);
end;
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
function TRGBA.Red_Get:byte;
//----------------------------------------------------------------------------
begin
  result:=RGBA.Red;
end;
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
function TRGBA.Green_Get:byte;
//----------------------------------------------------------------------------
begin
  result:=RGBA.Green;
end;
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
function TRGBA.Blue_Get:byte;
//----------------------------------------------------------------------------
begin
  result:=RGBA.Blue;
end;
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
function TRGBA.Alpha_Get:byte;
//----------------------------------------------------------------------------
begin
  result:=RGBA.Alpha;
end;
//----------------------------------------------------------------------------


//----------------------------------------------------------------------------
function TRGBA.RGB_Get:Cardinal;
//----------------------------------------------------------------------------
var Temp: rtRGBA;
begin
  Temp:= RGBA;
  Temp.Alpha:=0;
  result:=cardinal(Temp);
end;
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
function TRGBA.RGBA_Get: cardinal;
//----------------------------------------------------------------------------
begin
  result:=cardinal(RGBA);
end;
//----------------------------------------------------------------------------


//============================================================================
// End                          TRGBA
//============================================================================


//============================================================================
begin
end.
//============================================================================


//============================================================================
// EOF
//============================================================================

